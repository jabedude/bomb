Stage One:
        strcmp input, swordfish

Stage Two:
        strcmp getenv(user), input

Stage Three:
        strncat(input, username, 80)
        ( (input_as_a_number / input_length) / 12 ) > input_length

        wrote python script: stage3.py

Stage Four:
        first_letter = username[0]
        sscanf(input_string, "%u %u %u %u %u", nums)
        for (i = 0; i < 5; i++) {
                if (nums[i] <= first_letter)
                        return False
                first_letter += num[i]
        }
        if (first_letter % strlen(username) == 0)
                return True
        else
                return False

Stage Five:
        sscanf(input_string, "%c %d %c", char1, num, char2)

        num has to end up as 0 to pass stage.
        ~ 800 ~:
        800 += 126 - 106
        820 -= 126 + 111
        583 -= 115 + 126
        342 -= 104
        238
        800 - 238 = 562

Stage Six:
        sscanf(in_string, "%d %c %d", num1, character, num2)
        call to __(num1, num2)
                recursive until nums are zero!
                once both num1 and num2 are 0, return first char in username (lol)

        so we get j (106)
        106 logical and & the character must equal the sum of our numbers
        lets pick a number that we know & w/ 106 and has to be even (to get equal factors)
        will land us in the ascii alphanum range (48 - 126)
        106 & 103 == 98
        that works.
        98 / 2 = 49
        103 == g

Stage Seven:
        no sscanf :(
                working backwards, our goal is for rax to have a non-zero value
                the code block at 0x401420 does this, with a (setz al)
                [rbp - 0x18] must be zero to reach this code. This stack variable
                gets its value from rdi, the input_string to stage_7.
                If input_string is zero (NULL), the rest of the code is completely skipped.

Stage Eight:
        syscall, uh oh.
        malloc 100bytes 0x4016D4, if fails jump to safe @0x4016EC
        stage_8_input.txt <- lol
        hidden_phrase = '5$,1$3',0

        [rbp ] != 65 and *file == [rbp ] ^ 0x41
        0x35 (ascii 5) ^ 0x41 = 't'
        0x24 (ascii $) ^ 0x41 = 'e'
        0x2C (ascii ,) ^ 0x41 = 'm'
        0x31 (ascii 1) ^ 0x41 = 'p'
        0x24 (ascii $) ^ 0x41 = 'e'
        0x33 (ascii 3) ^ 0x41 = 'r'

        using this: https://filippo.io/linux-syscall-table/ I can see that we are calling
        0 (read), 2 (open), and 3 (close)

        echo temper > %d\ %c\ %d
        printf "\0" >> %d\ %c\ %d
        python2 -c "print 'a' * 80" >> %d\ %c\ %d
        syscall(2, "%d %c %d", 0x400000)
        file has to have more than 63 bytes in it
        and a null byte after the message (wut)
        https://unix.stackexchange.com/questions/148043/is-space-not-allowed-in-a-filename
        https://www.tecmint.com/manage-linux-filenames-with-special-characters/


Answers:
swordfish
josh
672
107 214 428 856 1713
~ 562 ~
49 g 49

testing
